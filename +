describe Place do
  let(:place) { build :place, :reviewed }

  it 'can save place to database' do
    place.save
    expect(Place.find(place.id)).to eq(place)
  end

  context 'Validate' do
    it 'empty place as invalid' do
      expect(Place.new).not_to be_valid
    end

    it 'name should not be blank' do
      place.name = ''
      expect(place).not_to be_valid
    end

    it 'Invalid place contact data shall be invalid' do
      ['03', '03'*12].each do |phone_number|
        expect(place.update_attributes(phone: phone_number)).to be_falsey
      end
      assert_not place.update_attributes(phone: '03')
      assert_not place.update_attributes(phone: '03' * 12)
      assert_equal ['is incorrectly formatted!'], place.errors.messages[:phone]

      assert_not place.update_attributes(email: 'foo@bar')
      assert_not place.update_attributes(email: 'foo@.bar')
      assert_not place.update_attributes(email: 'bar@')
      assert_equal ['is incorrectly formatted!'], place.errors.messages[:email]

      assert_not place.update_attributes(homepage: 'http:/heise.de')
      assert_not place.update_attributes(homepage: 'http://heise')
      assert_not place.update_attributes(homepage: 'http//heise')
      assert_equal ['is incorrectly formatted!'], place.errors.messages[:homepage]
    end

    it "Assure correctly securing URLs" do
      place.homepage = 'http://www.heise.de'
      place.save

      expect(Place.find(place.id).homepage).to eq('https://heise.de')
    end

    it 'Valid place contact data shall be valid' do
      assert place.update_attributes(phone: '0304858')
      assert place.update_attributes(email: 'foo@batz.bar')
      assert place.update_attributes(homepage: 'http://foo.bar')
      assert place.update_attributes(homepage: 'www.foo.bar')
      assert place.update_attributes(homepage: 'foo.bar')
    end
  end

  context ''
end
#
# class Placeit < ActiveSupport::TestCase
#
#
#   it 'html should be sanitized' do
#     place.save
#     assert_equal '<b>This is the description.</b>', Place.find_by(name: 'Kiezspinne').description_en
#   end
#
#   it 'duplicate entries not valid' do
#     skip('To be defined: Duplicate entries not valid')
#   end
#
#   it "Place with lat/lon does not need to be geocoded" do
#     place = create :place, :unreviewed, latitude: 60.0, longitude: 10.0
#     assert_equal 60.0, place.latitude
#     assert_equal 10.0, place.longitude
#
#   end
#
#   # Review
#   it 'Version is 1 for new points' do
#     place.save
#     assert_equal 1, Place.find_by_name('Kiezspinne').versions.length
#   end
#
#   it 'Updating a point increases number of versions' do
#     place.save
#     assert_difference 'place.versions.length' do
#       place.update(name: 'SomeOtherPlace')
#     end
#   end
#
#   it 'Updating translation record does not increase associated place versions' do
#     place.save
#     assert_difference 'place.versions.length', 0 do
#       place.translation.update_attributes(description: 'This is some edit')
#     end
#   end
#
#   it 'return nil for \'reviewed_version\' if no reviewed version' do
#     place.save
#     assert_not place.reviewed_version
#   end
#
#   it 'return unreviewed version if \'reviewed\' = false, but no versions' do
#     place.save
#     assert place.unreviewed_version
#   end
#   
#   it 'Assure place homepage links use https' do
#     place.homepage = 'www.it.com'
#     place.save
#
#     assert_equal 'https://it.com', place.reload.homepage
#
#     place.homepage = 'it.com'
#     place.save
#
#     assert_equal 'https://it.com', place.reload.homepage
#
#     place.homepage = 'http://it.com'
#     place.save
#
#     assert_equal 'https://it.com', place.reload.homepage
#   end
# end
