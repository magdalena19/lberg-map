##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

upstream lberg-map {
    # Path to Unicorn SOCK file, as defined previously
    server unix:/var/run/lbergsocket/unicorn.sock fail_timeout=0;
}
server {
	listen 80 default_server;
    listen [::]:80 default_server;
     # Redirect all HTTP requests to HTTPS with a 301 Moved Permanently
    # response.
    return 301 https://$host$request_uri;
}
# HTTPS server
#
server {
	listen 443 ssl http2;
    listen [::]:443 ssl http2;
	server_name lpkb.de www.lpkb.de;

	#root /var/www/html;
	#root /ruby-webapps/lberg-map;
    #index index.nginx-debian.html
	
    #try_files $uri/index.html  $uri @LbergMap;

    location /{ #@LbergMap {
        proxy_set_header X-Forwarded-For https;
        #proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header    Host $http_host;
        proxy_redirect off;
        proxy_pass  http://lberg:30000;
        #proxy_pass http://lberg-map;
    }

    # https://thomas-leister.de/anleitung-fuer-lets-encrypt-kostenlose-tls-zertifikate-fuer-alle/
    # ./certbot-auto certonly --standalone --rsa-key-size 4096 -d lpkb.de -d www.lpkb.de
	ssl on;
	ssl_certificate /etc/letsencrypt/live/lpkb.de/fullchain.pem;
	ssl_certificate_key /etc/letsencrypt/live/lpkb.de/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/lpkb.de/chain.pem;

	ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;

	ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
	#ssl_ciphers "HIGH:!aNULL:!MD5 or HIGH:!aNULL:!MD5:!3DES";
    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
	ssl_prefer_server_ciphers on;
    ## Diffie-Hellman parameter for DHE ciphersuites, recommended 2048 bits
    # gen with openssl dhparam -out dhparams.pem 2048
    # check https://weakdh.org/sysadmin.html www.ssllabs.com
    ssl_dhparam /etc/letsencrypt/live/lpkb.de/dhparams.pem;
    # OCSP Stapling ---
    # fetch OCSP records from URL in ssl_certificate and cache them
    ssl_stapling on;
    ssl_stapling_verify on;
}
# another virtual host using mix of IP-, name-, and port-based configuration
#
#server {
#	listen 8000;
#	listen somename:8080;
#	server_name somename alias another.alias;
#	root html;
#	index index.html index.htm;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}




